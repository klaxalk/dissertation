% %{ vrtule

def vrtule {

def n_segs 64
sweep { n_segs<>, rotate(360 / n_segs, (0,0,0), [0,1,0]) } line[linecolor=gray](-0.4,0,0)(0,0,0)
}

% %}

% %{ sipka_rotace

def sipka_rotace {

	def n_segs 64
  sweep { n_segs, rotate(-180 / n_segs, (0,0,0), [0,1,0]) } (-0.5,0,0)
  % line[arrows=->] (0.5,0,0)(0.5,0,0.2)
  line[arrows=->] (-0.5,0,0)(-0.5,0,0.2)

  special |\footnotesize
  	\uput{2pt}[u]#1{$\phi$}
  	\uput[d]#2{$$}
  	\uput[d]#3{$$}|
  	(0.3,0.2,0)(0.5,0,0)(-0.5,0,0)
}

% %}

% %{ quadrotor

def quadrotor {

	def p1 (0,0,-1)
  def p2 (1,0,0)
  def stred (0,0,0)
  def p3 (0,0,1)
  def p4 (-1,0,0)

  def arrow_len 2

  line[linecolor=red](p1)(stred)
  line[linecolor=black](stred)(p3)
  line[linecolor=black](p2)(p4)

  put { translate([1,0.01,0]) } {vrtule} 
  put { translate([-1,0.01,0]) } {vrtule} 
  put { translate([0,0.01,1]) } {vrtule} 
  put { translate([0,0.01,-1]) } {vrtule} 

  def p44 (arrow_len,0,0)
  def p11 (0,0,-arrow_len*1.3)
  line[arrows=->] (p1)(p11)
  line[arrows=->] (p4)(p44)
  % line[linestyle=dotted](0,0,0)(-3,0,0)

  special |\scriptsize
  	\uput{2pt}[u]#1{$\mathbf{b}_2$}
  	\uput[u]#2{$\mathbf{b}_1$}|
  	(0.4, 0, -arrow_len*1.2)(arrow_len+0.3, -0.3, 0)

  line[linestyle=dotted](stred)(0,-2.0,0)	
  line[linestyle=dashed](stred)(-3,0,0)	
  line[linestyle=dashed](stred)(0,0,3)		

  line[arrows=->] (0,0,0)(0, 1,0)

  special |\scriptsize
  	\uput{2pt}[ul]#1{$\mathbf{b}_3$}|
  	(0.5, 1.1, 0)
}

% %}

% %{ coordinates

def coordinates {

	def size 1

	line[arrows=->] (0, 0, 0)(size, 0, 0)

	special |\scriptsize
		\uput{2pt}[ul]#1{$\mathbf{x}$}|
		(size, 0, 0)

	line[arrows=->] (0, 0, 0)(0, size, 0)

	special |\scriptsize
		\uput{2pt}[ul]#1{$\mathbf{y}$}|
		(0, size, 0)

	line[arrows=->] (0, 0, 0)(0, 0, size)

	special |\scriptsize
		\uput{2pt}[ul]#1{$\mathbf{z}$}|
		(0, 0, size)
}

% %}

% %{ scatterer

def scatterer {

	def size 0.1

	def p1 (0,size,size)
  def p2 (0,-size,size)
  def p3 (0,-size,-size)
  def p4 (0,size,-size)

  polygon[fillcolor=lightgray, lay=in](p1)(p2)(p3)(p4)
}

% %}

def circle {

  def size 1
  def n_segs 360
  repeat { n_segs, rotate(360 / n_segs, (0,0,0), [0,1,0]) } line[linecolor=blue] (size,0,size*6.28/n_segs)(size,0,0)
}

def sphere {

  {circle}
}

def scene { 

  def scattered_distance 0

  def scattered_position [scattered_distance,0,0]
  def radiation_source (2,0,0)

  {coordinates}

  % put { translate([scattered_position]) } {sphere}

  put { translate([scattered_position]) } {scatterer}
  {sphere}
  
  line[linecolor=red,linestyle=dashed](radiation_source)(scattered_distance, 0, 0)
}

put { rotate(-5, (0,0,0), [1,0,0]) then rotate(-30, (0,0,0), [0,1,0]) then rotate(3, (0,0,0), [0,0,1])} {scene}
